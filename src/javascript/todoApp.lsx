
{ drop-while, filter, map, zip } = require "prelude-ls"

TodoItem = React.create-class do

    on-change: (e) ->
        e.target.checked
        |> @props.on-finished-change

    render: ->
        | @props.disabled =>
            ``<span>
                <input type="checkbox" checked={this.props.finished} id={this.props.text} disabled="disabled" />
                <label htmlFor={this.props.text}>{this.props.text}</label>
              </span>``
        | _ =>
            ``<span>
                <input type="checkbox" checked={this.props.finished} id={this.props.text} onChange={this.onChange} />
                <label htmlFor={this.props.text}>{this.props.text}</label>
                <button className="del" onClick={this.props.onDelete}>X</button>
              </span>``

TodoList = React.create-class do

    get-initial-state: ->
        name: "default"
        items: []
        new-task-text: ""
        mail-to-link: ""

    component-did-mount: !->
        @load-list @props.list-index

    component-will-receive-props: (new-props) !->
        @load-list new-props.list-index

    load-list: (list-index) !->
        list = todo-storage.load-list list-index
        @set-state do
            if list
                name: list.name ? "default"
                items: list.items ? []
            else
                name: "default"
                items: []

    save-list: (new-items) !->
        todo-storage.save-list @props.list-index, { name: @state.name, items: new-items }

    on-new-task-text-change: (e) !->
        @set-state new-task-text: e.target.value

    on-new-task: (e) ->
        e.prevent-default!
        new-items = @state.items ++ [ text: @state.new-task-text, finished: false ]
        @set-state do
            items: new-items
            new-task-text: ""
        @save-list new-items
        false

    create-item: (item) ->

        on-delete = (e) ~>
            e.prevent-default!
            new-items = @state.items
                        |> filter (x) -> x != item
            @set-state items: new-items
            @save-list new-items
            false

        on-finished-change = (x) ~>
            item.finished = x
            new-items = @state.items
            @set-state items: new-items
            @save-list new-items
            false

        ``<li>
            <TodoItem text={item.text} finished={item.finished} onDelete={onDelete} onFinishedChange={onFinishedChange} disabled={this.props.isIncomingList} />
          </li>``

    on-delete-list: (e) ->
        @props.on-delete-list e, @props.list-index

    on-delete-incoming-list: (e) ->
        @props.on-delete-incoming-list e

    create-mail-to-link: (email) ->
        receive-link = JSON.stringify name: @state.name, items: @state.items
                       |> encodeURIComponent
        "mailto:#email?body=#receive-link"

    on-recipient-change: (e) ->
        @set-state mail-to-link: @create-mail-to-link e.target.value

    noop: (e) ->
        e.prevent-default!
        false

    render: ->
        | @props.is-incoming-list =>
            visible-name =
                | !@props.incomingList.name or @props.incomingList.name == "" => "no-name"
                | _ => @props.incomingList.name

            visible-name = "received list (#visible-name)"

            children =
                @props.incomingList.items
                |> map (@createItem)

            ``<div id="todo_list">
                <form onSubmit={this.onDeleteIncomingList}>
                    <button className="del">Delete list</button>
                </form>
                <h4>{visibleName}</h4>
                <ul>
                    {children}
                </ul>
              </div>``
        | _ =>
            visible-name =
                | !@state.name or @state.name == "" => "(no-name)"
                | _ => @state.name

            children =
                @state.items
                |> map (@createItem)

            ``<div id="todo_list">
                <form onSubmit={this.onDeleteList}>
                    <button className="del">Delete list</button>
                </form>
                <h4>{visibleName}</h4>
                <ul>
                    {children}
                    <form onSubmit={this.onNewTask}>
                        <input type="text" placeholder="new task" onChange={this.onNewTaskTextChange} value={this.state.newTaskText} />
                        <button>Add item</button>
                    </form>
                </ul>
                <hr />
                <form onSubmit={this.noop}>
                    <label for="recipient-email-address">Send list in email to:</label>
                    <input type="email" placeholder="recipient" onChange={this.onRecipientChange} />
                    <br />
                    <a href={this.state.mailToLink}>Send</a>
                </form>
              </div>``

TodoApp = React.create-class do
    
    get-initial-state: ->
        incoming-list: null
        is-incoming-list-selected: false
        incoming-list-name-input: ""
        lists-names: []
        selected-index: 0
        new-list-name: ""

    get-incoming-list: ->
        parse-json = (text) ->
            try
                if JSON.parse text then that else null
            catch
                null
        as-list = (obj) ->
            if obj
                name: obj.name, items: obj.items
            else
                null

        location.hash
        |> drop-while ((x) -> x == "#" or x == "!")
        |> parse-json
        |> as-list

    component-did-mount: !->
        incoming-list = @get-incoming-list!
        @set-state do
            incoming-list: incoming-list
            is-incoming-list-selected: (incoming-list != null)
            incoming-list-name-input: incoming-list?.name
            lists-names: @load-lists!

    load-lists: ->
        todo-storage.load-list-names!

    create-list-selector: ([index, name]) ->

        select-list = (e) ~>
            e.prevent-default!
            @set-state do
                is-incoming-list-selected: false
                selected-index: index
            false

        selectable-name =
            | !name or name == "" => "(no-name)"
            | _ => name

        ``<li>
            <a href="#" onClick={selectList}>{selectableName}</a>
          </li>``

    create-incoming-list-selector: (name) ->

        select-list = (e) ~>
            e.prevent-default!
            @set-state is-incoming-list-selected: true
            false

        visible-name =
            | !name or name == "" => "no-name"
            | _ => name

        selectable-name = "received list (#visible-name)"

        ``<li>
            <a href="#" onClick={selectList}>{selectableName}</a>
          </li>``

    on-new-list-name-change: (e) !->
        @set-state new-list-name: e.target.value

    on-incoming-list-name-change: (e) !->
        @set-state incoming-list-name-input: e.target.value

    on-new-list: (e) ->
        e.prevent-default!
        new-list-index = todo-storage.save-new-list @state.new-list-name
        @set-state do
            lists-names: @load-lists!
            new-list-name: ""
            selected-index: new-list-index
        false

    on-save-incoming: (e) ->
        e.prevent-default!
        new-list-index = todo-storage.save-incoming-list do
                            name: @state.incoming-list-name-input
                            items: @state.incoming-list.items
        @set-state do
            incoming-list: null
            is-incoming-list-selected: false
            lists-names: @load-lists!
            new-list-name: ""
            selected-index: new-list-index
        false

    on-delete-list: (e, list-index) ->
        e.prevent-default!
        todo-storage.delete-list list-index
        @set-state do
            lists-names: @load-lists!
            selected-index: 0
        false

    on-delete-incoming-list: (e) ->
        e.prevent-default!
        @set-state do
            incoming-list: null
            is-incoming-list-selected: false
            lists-names: @load-lists!
        location.hash = "";
        false

    render: ->
        list-selectors = @state.lists-names
                         |> zip [0 til @state.lists-names.length]
                         |> map (@create-list-selector)

        switch
        | @state.incoming-list != null =>
            incoming-list-selector = @state.incoming-list.name
                                     |> @create-incoming-list-selector
            ``<div>
                <div id="todo_lists">
                    <ul>
                        {incomingListSelector}
                        <li>
                            <form onSubmit={this.onSaveIncoming}>
                                <input type="text" placeholder="new list" onChange={this.onIncomingListNameChange} value={this.state.incomingListNameInput} />
                                <button>Save list</button>
                            </form>
                        </li>
                    </ul>
                    <hr />
                    <ul>
                        {listSelectors}
                        <li>
                            <form onSubmit={this.onNewList}>
                                <input type="text" placeholder="new list" onChange={this.onNewListNameChange} value={this.state.newListName} />
                                <button>Add list</button>
                            </form>
                        </li>
                    </ul>
                </div>
                <TodoList listIndex={this.state.selectedIndex} onDeleteList={this.onDeleteList} onDeleteIncomingList={this.onDeleteIncomingList}
                          isIncomingList={this.state.isIncomingListSelected} incomingList={this.state.incomingList} />
                <div className="clear"></div>
              </div>``
        | _ =>
            ``<div>
                <div id="todo_lists">
                    <ul>
                        {listSelectors}
                        <li>
                            <form onSubmit={this.onNewList}>
                                <input type="text" placeholder="new list" onChange={this.onNewListNameChange} value={this.state.newListName} />
                                <button>Add list</button>
                            </form>
                        </li>
                    </ul>
                </div>
                <TodoList listIndex={this.state.selectedIndex} onDeleteList={this.onDeleteList}
                          isIncomingList={false} incomingList={null} />
                <div className="clear"></div>
              </div>``

React.render do
    ``<TodoApp />``
    document.get-element-by-id "todo_app"
