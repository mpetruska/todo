// Generated by LiveScript 1.3.1
(function(){
  var ref$, filter, map, zip, TodoItem, TodoList, TodoApp;
  ref$ = require("prelude-ls"), filter = ref$.filter, map = ref$.map, zip = ref$.zip;
  TodoItem = React.createClass({displayName: "TodoItem",
    onChange: function(e){
      return this.props.onFinishedChange(
      e.target.checked);
    },
    render: function(){
      return React.createElement("span", null, 
          React.createElement("input", {type: "checkbox", checked: this.props.finished, id: this.props.text, onChange: this.onChange}), 
          React.createElement("label", {htmlFor: this.props.text}, this.props.text), 
          React.createElement("button", {className: "del", onClick: this.props.onDelete}, "X")
        );
    }
  });
  TodoList = React.createClass({displayName: "TodoList",
    getInitialState: function(){
      return {
        name: "default",
        items: [],
        newTaskText: ""
      };
    },
    componentDidMount: function(){
      this.loadList(this.props.listIndex);
    },
    componentWillReceiveProps: function(newProps){
      this.loadList(newProps.listIndex);
    },
    loadList: function(listIndex){
      var list, ref$;
      list = todoStorage.loadList(listIndex);
      this.setState(list
        ? {
          name: (ref$ = list.name) != null ? ref$ : "default",
          items: (ref$ = list.items) != null
            ? ref$
            : []
        }
        : {
          name: "default",
          items: []
        });
    },
    saveList: function(newItems){
      todoStorage.saveList(this.props.listIndex, {
        name: this.state.name,
        items: newItems
      });
    },
    onNewTaskTextChange: function(e){
      this.setState({
        newTaskText: e.target.value
      });
    },
    onNewTask: function(e){
      var newItems;
      e.preventDefault();
      newItems = this.state.items.concat([{
        text: this.state.newTaskText,
        finished: false
      }]);
      this.setState({
        items: newItems,
        newTaskText: ""
      });
      this.saveList(newItems);
      return false;
    },
    createItem: function(item){
      var onDelete, onFinishedChange, this$ = this;
      onDelete = function(e){
        var newItems;
        e.preventDefault();
        newItems = filter(function(x){
          return x !== item;
        })(
        this$.state.items);
        this$.setState({
          items: newItems
        });
        this$.saveList(newItems);
        return false;
      };
      onFinishedChange = function(x){
        var newItems;
        item.finished = x;
        newItems = this$.state.items;
        this$.setState({
          items: newItems
        });
        this$.saveList(newItems);
        return false;
      };
      return React.createElement("li", null, 
          React.createElement(TodoItem, {text: item.text, finished: item.finished, onDelete: onDelete, onFinishedChange: onFinishedChange})
        );
    },
    onDeleteList: function(e){
      return this.props.onDeleteList(e, this.props.listIndex);
    },
    render: function(){
      var visibleName, children;
      visibleName = (function(){
        switch (false) {
        case !(!this.state.name || this.state.name === ""):
          return "(no-name)";
        default:
          return this.state.name;
        }
      }.call(this));
      children = map(this.createItem)(
      this.state.items);
      return React.createElement("div", {id: "todo_list"}, 
          React.createElement("form", {onSubmit: this.onDeleteList}, 
              React.createElement("button", {className: "del"}, "Delete list")
          ), 
          React.createElement("h4", null, visibleName), 
          React.createElement("ul", null, 
              children, 
              React.createElement("form", {onSubmit: this.onNewTask}, 
                  React.createElement("input", {type: "text", placeholder: "new task", onChange: this.onNewTaskTextChange, value: this.state.newTaskText}), 
                  React.createElement("button", null, "Add item")
              )
          )
        );
    }
  });
  TodoApp = React.createClass({displayName: "TodoApp",
    getInitialState: function(){
      return {
        listsNames: [],
        selectedIndex: 0,
        newListName: ""
      };
    },
    componentDidMount: function(){
      this.setState({
        listsNames: this.loadLists()
      });
    },
    loadLists: function(){
      return todoStorage.loadListNames();
    },
    createListSelector: function(arg$){
      var index, name, selectList, selectableName, this$ = this;
      index = arg$[0], name = arg$[1];
      selectList = function(e){
        e.preventDefault();
        this$.setState({
          selectedIndex: index
        });
        return false;
      };
      selectableName = (function(){
        switch (false) {
        case !(!name || name === ""):
          return "(no-name)";
        default:
          return name;
        }
      }());
      return React.createElement("li", null, 
          React.createElement("a", {href: "#", onClick: selectList}, selectableName)
        );
    },
    onNewListNameChange: function(e){
      this.setState({
        newListName: e.target.value
      });
    },
    onNewList: function(e){
      var newListIndex;
      e.preventDefault();
      newListIndex = todoStorage.saveNewList(this.state.newListName);
      this.setState({
        listsNames: this.loadLists(),
        newListName: "",
        selectedIndex: newListIndex
      });
      return false;
    },
    onDeleteList: function(e, listIndex){
      e.preventDefault();
      todoStorage.deleteList(listIndex);
      this.setState({
        listsNames: this.loadLists(),
        selectedIndex: 0
      });
      return false;
    },
    render: function(){
      var listSelectors;
      listSelectors = map(this.createListSelector)(
      zip((function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = this.state.listsNames.length; i$ < to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }.call(this)))(
      this.state.listsNames));
      return React.createElement("div", null, 
          React.createElement("div", {id: "todo_lists"}, 
              React.createElement("ul", null, 
                  listSelectors, 
                  React.createElement("li", null, 
                      React.createElement("form", {onSubmit: this.onNewList}, 
                          React.createElement("input", {type: "text", placeholder: "new list", onChange: this.onNewListNameChange, value: this.state.newListName}), 
                          React.createElement("button", null, "Add list")
                      )
                  )
              )
          ), 
          React.createElement(TodoList, {listIndex: this.state.selectedIndex, onDeleteList: this.onDeleteList}), 
          React.createElement("div", {className: "clear"})
        );
    }
  });
  React.render(React.createElement(TodoApp, null), document.getElementById("todo_app"));
}).call(this);
