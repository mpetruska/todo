// Generated by LiveScript 1.3.1
(function(){
  var ref$, dropWhile, filter, head, join, map, tail, takeWhile, zip, TodoItem, TodoList, TodoApp, split$ = ''.split;
  ref$ = require("prelude-ls"), dropWhile = ref$.dropWhile, filter = ref$.filter, head = ref$.head, join = ref$.join, map = ref$.map, tail = ref$.tail, takeWhile = ref$.takeWhile, zip = ref$.zip;
  TodoItem = React.createClass({displayName: "TodoItem",
    onChange: function(e){
      return this.props.onFinishedChange(
      e.target.checked);
    },
    render: function(){
      switch (false) {
      case !this.props.disabled:
        return React.createElement("span", null, 
            React.createElement("input", {type: "checkbox", checked: this.props.finished, id: this.props.text, disabled: "disabled"}), 
            React.createElement("label", {htmlFor: this.props.text}, this.props.text)
          );
      default:
        return React.createElement("span", null, 
            React.createElement("input", {type: "checkbox", checked: this.props.finished, id: this.props.text, onChange: this.onChange}), 
            React.createElement("label", {htmlFor: this.props.text}, this.props.text), 
            React.createElement("button", {className: "del", onClick: this.props.onDelete}, "X")
          );
      }
    }
  });
  TodoList = React.createClass({displayName: "TodoList",
    getInitialState: function(){
      return {
        name: "default",
        items: [],
        newTaskText: "",
        recipient: "",
        mailToLink: ""
      };
    },
    componentDidMount: function(){
      this.loadList(this.props.listIndex);
    },
    componentWillReceiveProps: function(newProps){
      this.loadList(newProps.listIndex);
    },
    cleanMailToLink: function(newState){
      var x$;
      x$ = newState;
      x$.recipient = "";
      x$.mailToLink = "";
      return newState;
    },
    loadList: function(listIndex){
      var list, newState, ref$;
      list = todoStorage.loadList(listIndex);
      newState = list
        ? {
          name: (ref$ = list.name) != null ? ref$ : "default",
          items: (ref$ = list.items) != null
            ? ref$
            : []
        }
        : {
          name: "default",
          items: []
        };
      this.setState(this.cleanMailToLink(
      newState));
    },
    saveList: function(newItems){
      todoStorage.saveList(this.props.listIndex, {
        name: this.state.name,
        items: newItems
      });
    },
    onNewTaskTextChange: function(e){
      this.setState({
        newTaskText: e.target.value
      });
    },
    onNewTask: function(e){
      var newItems, newState;
      e.preventDefault();
      newItems = this.state.items.concat([{
        text: this.state.newTaskText,
        finished: false
      }]);
      newState = {
        items: newItems,
        newTaskText: ""
      };
      this.setState(this.cleanMailToLink(
      newState));
      this.saveList(newItems);
      return false;
    },
    createItem: function(item){
      var onDelete, onFinishedChange, this$ = this;
      onDelete = function(e){
        var newItems;
        e.preventDefault();
        newItems = filter(function(x){
          return x !== item;
        })(
        this$.state.items);
        this$.setState({
          items: this$.cleanMailToLink(
          newItems)
        });
        this$.saveList(newItems);
        return false;
      };
      onFinishedChange = function(x){
        var newItems;
        item.finished = x;
        newItems = this$.state.items;
        this$.setState({
          items: this$.cleanMailToLink(
          newItems)
        });
        this$.saveList(newItems);
        return false;
      };
      return React.createElement("li", null, 
          React.createElement(TodoItem, {text: item.text, finished: item.finished, onDelete: onDelete, onFinishedChange: onFinishedChange, disabled: this.props.isIncomingList})
        );
    },
    onDeleteList: function(e){
      return this.props.onDeleteList(e, this.props.listIndex);
    },
    onDeleteIncomingList: function(e){
      return this.props.onDeleteIncomingList(e);
    },
    createMailToLink: function(email){
      var encodePart, url, sep, encodedName, encodedItems, receiveList;
      encodePart = function(text){
        return encodeURIComponent(
        text.replace(/:/g, "&colon;"));
      };
      url = takeWhile(function(x){
        return x !== "#";
      })(
      location.href);
      sep = '#!';
      encodedName = encodePart(
      this.state.name);
      encodedItems = join(":")(
      map(encodePart)(
      map(function(x){
        if (x.finished) {
          return "+" + x.text;
        } else {
          return "-" + x.text;
        }
      })(
      this.state.items)));
      receiveList = encodedName + ":" + encodedItems;
      return "mailto:" + email + "?body=" + url + sep + receiveList;
    },
    onRecipientChange: function(e){
      var newRecipient;
      newRecipient = e.target.value;
      return this.setState({
        recipient: newRecipient,
        mailToLink: this.createMailToLink(newRecipient)
      });
    },
    noop: function(e){
      e.preventDefault();
      return false;
    },
    render: function(){
      var visibleName, children;
      switch (false) {
      case !this.props.isIncomingList:
        visibleName = (function(){
          switch (false) {
          case !(!this.props.incomingList.name || this.props.incomingList.name === ""):
            return "no-name";
          default:
            return this.props.incomingList.name;
          }
        }.call(this));
        visibleName = "received list (" + visibleName + ")";
        children = map(this.createItem)(
        this.props.incomingList.items);
        return React.createElement("div", {id: "todo_list"}, 
            React.createElement("form", {onSubmit: this.onDeleteIncomingList}, 
                React.createElement("button", {className: "del"}, "Delete list")
            ), 
            React.createElement("h4", null, visibleName), 
            React.createElement("ul", null, 
                children
            )
          );
      default:
        visibleName = (function(){
          switch (false) {
          case !(!this.state.name || this.state.name === ""):
            return "(no-name)";
          default:
            return this.state.name;
          }
        }.call(this));
        children = map(this.createItem)(
        this.state.items);
        return React.createElement("div", {id: "todo_list"}, 
            React.createElement("form", {onSubmit: this.onDeleteList}, 
                React.createElement("button", {className: "del"}, "Delete list")
            ), 
            React.createElement("h4", null, visibleName), 
            React.createElement("ul", null, 
                children, 
                React.createElement("form", {onSubmit: this.onNewTask}, 
                    React.createElement("input", {type: "text", placeholder: "new task", onChange: this.onNewTaskTextChange, value: this.state.newTaskText}), 
                    React.createElement("button", null, "Add item")
                )
            ), 
            React.createElement("hr", null), 
            React.createElement("form", {onSubmit: this.noop}, 
                React.createElement("label", {for: "recipient-email-address"}, "Send list in email to:"), 
                React.createElement("input", {type: "email", placeholder: "recipient", value: this.state.recipient, onChange: this.onRecipientChange}), 
                React.createElement("br", null), 
                React.createElement("a", {href: this.state.mailToLink}, "Send")
            )
          );
      }
    }
  });
  TodoApp = React.createClass({displayName: "TodoApp",
    getInitialState: function(){
      return {
        incomingList: null,
        isIncomingListSelected: false,
        incomingListNameInput: "",
        listsNames: [],
        selectedIndex: 0,
        newListName: ""
      };
    },
    getIncomingList: function(){
      var decodePart, startsWith, parseList;
      decodePart = function(text){
        return decodeURIComponent(
        text).replace(/&colon;/g, ":");
      };
      startsWith = function(text, prefix){
        return text.indexOf(prefix) === 0;
      };
      parseList = function(text){
        var parts, name, items;
        switch (false) {
        case !text:
          parts = split$.call(text, ":");
          name = decodePart(
          head(
          parts));
          items = filter(function(x){
            return x !== null;
          })(
          map(function(s){
            switch (false) {
            case !startsWith(s, "+"):
              return {
                text: s.substring(1),
                finished: true
              };
            case !startsWith(s, "-"):
              return {
                text: s.substring(1),
                finished: false
              };
            default:
              return null;
            }
          })(
          map(decodePart)(
          tail(
          parts))));
          return {
            name: name,
            items: items
          };
        default:
          return null;
        }
      };
      return parseList(
      dropWhile(function(x){
        return x === "#" || x === "!";
      })(
      location.hash));
    },
    componentDidMount: function(){
      var self;
      this.initialize();
      self = this;
      window.onhashchange = function(){
        return self.initialize();
      };
    },
    componentWillUnmount: function(){
      window.onhashchange = null;
    },
    initialize: function(){
      var incomingList;
      incomingList = this.getIncomingList();
      this.setState({
        incomingList: incomingList,
        isIncomingListSelected: incomingList !== null,
        incomingListNameInput: incomingList != null ? incomingList.name : void 8,
        listsNames: this.loadLists()
      });
    },
    loadLists: function(){
      return todoStorage.loadListNames();
    },
    createListSelector: function(arg$){
      var index, name, selectList, selectableName, this$ = this;
      index = arg$[0], name = arg$[1];
      selectList = function(e){
        e.preventDefault();
        this$.setState({
          isIncomingListSelected: false,
          selectedIndex: index
        });
        return false;
      };
      selectableName = (function(){
        switch (false) {
        case !(!name || name === ""):
          return "(no-name)";
        default:
          return name;
        }
      }());
      return React.createElement("li", null, 
          React.createElement("a", {href: "#", onClick: selectList}, selectableName)
        );
    },
    createIncomingListSelector: function(name){
      var selectList, visibleName, selectableName, this$ = this;
      selectList = function(e){
        e.preventDefault();
        this$.setState({
          isIncomingListSelected: true
        });
        return false;
      };
      visibleName = (function(){
        switch (false) {
        case !(!name || name === ""):
          return "no-name";
        default:
          return name;
        }
      }());
      selectableName = "received list (" + visibleName + ")";
      return React.createElement("li", null, 
          React.createElement("a", {href: "#", onClick: selectList}, selectableName)
        );
    },
    onNewListNameChange: function(e){
      this.setState({
        newListName: e.target.value
      });
    },
    onIncomingListNameChange: function(e){
      this.setState({
        incomingListNameInput: e.target.value
      });
    },
    onNewList: function(e){
      var newListIndex;
      e.preventDefault();
      newListIndex = todoStorage.saveNewList(this.state.newListName);
      this.setState({
        listsNames: this.loadLists(),
        newListName: "",
        selectedIndex: newListIndex
      });
      return false;
    },
    onSaveIncoming: function(e){
      var newListIndex;
      e.preventDefault();
      newListIndex = todoStorage.saveIncomingList({
        name: this.state.incomingListNameInput,
        items: this.state.incomingList.items
      });
      this.setState({
        incomingList: null,
        isIncomingListSelected: false,
        listsNames: this.loadLists(),
        newListName: "",
        selectedIndex: newListIndex
      });
      return false;
    },
    onDeleteList: function(e, listIndex){
      e.preventDefault();
      todoStorage.deleteList(listIndex);
      this.setState({
        listsNames: this.loadLists(),
        selectedIndex: 0
      });
      return false;
    },
    onDeleteIncomingList: function(e){
      e.preventDefault();
      this.setState({
        incomingList: null,
        isIncomingListSelected: false,
        listsNames: this.loadLists()
      });
      location.hash = "";
      return false;
    },
    render: function(){
      var listSelectors, incomingListSelector;
      listSelectors = map(this.createListSelector)(
      zip((function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = this.state.listsNames.length; i$ < to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }.call(this)))(
      this.state.listsNames));
      switch (false) {
      case this.state.incomingList === null:
        incomingListSelector = this.createIncomingListSelector(
        this.state.incomingList.name);
        return React.createElement("div", null, 
            React.createElement("div", {id: "todo_lists"}, 
                React.createElement("ul", null, 
                    incomingListSelector, 
                    React.createElement("li", null, 
                        React.createElement("form", {onSubmit: this.onSaveIncoming}, 
                            React.createElement("input", {type: "text", placeholder: "new list", onChange: this.onIncomingListNameChange, value: this.state.incomingListNameInput}), 
                            React.createElement("button", null, "Save list")
                        )
                    )
                ), 
                React.createElement("hr", null), 
                React.createElement("ul", null, 
                    listSelectors, 
                    React.createElement("li", null, 
                        React.createElement("form", {onSubmit: this.onNewList}, 
                            React.createElement("input", {type: "text", placeholder: "new list", onChange: this.onNewListNameChange, value: this.state.newListName}), 
                            React.createElement("button", null, "Add list")
                        )
                    )
                )
            ), 
            React.createElement(TodoList, {listIndex: this.state.selectedIndex, onDeleteList: this.onDeleteList, onDeleteIncomingList: this.onDeleteIncomingList, 
                      isIncomingList: this.state.isIncomingListSelected, incomingList: this.state.incomingList}), 
            React.createElement("div", {className: "clear"})
          );
      default:
        return React.createElement("div", null, 
            React.createElement("div", {id: "todo_lists"}, 
                React.createElement("ul", null, 
                    listSelectors, 
                    React.createElement("li", null, 
                        React.createElement("form", {onSubmit: this.onNewList}, 
                            React.createElement("input", {type: "text", placeholder: "new list", onChange: this.onNewListNameChange, value: this.state.newListName}), 
                            React.createElement("button", null, "Add list")
                        )
                    )
                )
            ), 
            React.createElement(TodoList, {listIndex: this.state.selectedIndex, onDeleteList: this.onDeleteList, 
                      isIncomingList: false, incomingList: null}), 
            React.createElement("div", {className: "clear"})
          );
      }
    }
  });
  React.render(React.createElement(TodoApp, null), document.getElementById("todo_app"));
}).call(this);
