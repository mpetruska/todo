// Generated by LiveScript 1.3.1
(function(){
  var ref$, curry, each, filter, map, unfoldr, zip;
  ref$ = require("prelude-ls"), curry = ref$.curry, each = ref$.each, filter = ref$.filter, map = ref$.map, unfoldr = ref$.unfoldr, zip = ref$.zip;
  window.todoStorage = {
    createDefaultList: function(){
      var defaultList;
      defaultList = {
        name: "default",
        items: []
      };
      todoStorage.saveList(0, defaultList);
      return defaultList;
    },
    loadList: function(i){
      var that, e;
      try {
        if (that = localStorage.getItem("todo-" + i)) {
          return JSON.parse(that);
        } else {
          return null;
        }
      } catch (e$) {
        e = e$;
        console.log(e);
        return null;
      }
    },
    loadListNames: function(){
      var listNames;
      listNames = map(function(it){
        return it.name;
      })(
      todoStorage.loadLists());
      if (!listNames || listNames.length <= 0) {
        listNames = [todoStorage.createDefaultList().name];
      }
      return listNames;
    },
    loadLists: function(){
      var e;
      try {
        return unfoldr(function(i){
          var that;
          switch (false) {
          case !(that = todoStorage.loadList(i)):
            return [that, i + 1];
          default:
            return null;
          }
        })(
        0);
      } catch (e$) {
        e = e$;
        console.log(e);
        return null;
      }
    },
    saveList: function(i, list){
      var e;
      try {
        localStorage.setItem("todo-" + i, JSON.stringify(
        list));
      } catch (e$) {
        e = e$;
        console.log(e);
      }
    },
    saveLists: function(lists){
      var e;
      try {
        each(function(arg$){
          var i, list;
          i = arg$[0], list = arg$[1];
          return todoStorage.saveList(i, list);
        })(
        zip((function(){
          var i$, to$, results$ = [];
          for (i$ = 0, to$ = lists.length; i$ < to$; ++i$) {
            results$.push(i$);
          }
          return results$;
        }()))(
        lists));
        return true;
      } catch (e$) {
        e = e$;
        console.log(e);
        return false;
      }
    },
    saveNewList: function(name){
      var newListIndex;
      newListIndex = todoStorage.loadListNames().length;
      todoStorage.saveList(newListIndex, {
        name: name,
        items: []
      });
      return newListIndex;
    },
    deleteList: function(index){
      var lists;
      lists = todoStorage.loadLists();
      todoStorage.saveLists(map(function(){
        return null;
      })(
      lists));
      lists = map(function(arg$){
        var x;
        x = arg$[1];
        return x;
      })(
      filter(function(arg$){
        var i;
        i = arg$[0];
        return i !== index;
      })(
      zip((function(){
        var i$, to$, results$ = [];
        for (i$ = 0, to$ = lists.length; i$ < to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }()))(
      lists)));
      return todoStorage.saveLists(lists);
    }
  };
}).call(this);
